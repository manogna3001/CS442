import 'package:yaml/yaml.dart';
import 'util/stats.dart'; 

/// Base class for all process types.
abstract class Process {
  final String name; 
  final YamlMap config; 

 /// Returns a list of all events generated by this process.
  Process(this.name, this.config);
  List<Event> generateEvents();
}


class SingletonProcess extends Process {
  SingletonProcess(String name, YamlMap config) : super(name, config);
//overrides generate events for process class.
  @override
  List<Event> generateEvents() {
    final arrival = (config['arrival'] as num).toInt();   
    final duration = (config['duration'] as num).toInt(); 
    return [Event(name, arrival, duration)];

  }
}


class PeriodicProcess extends Process {
  PeriodicProcess(String name, YamlMap config) : super(name, config);
//overrides generate events for process class.
  @override
  List<Event> generateEvents() {
    final duration =
        int.parse(config['duration'].toString()); 
    final interarrivalTime =
        int.parse(config['interarrival-time'].toString()); 
    final firstArrival =
        int.parse(config['first-arrival'].toString()); 
    final numRepetitions = int.parse(
        config['num-repetitions'].toString()); 
// empty list for generated events.
    final events = <Event>[]; 
    int currentTime = firstArrival;
   

    for (var i = 0; i < numRepetitions; i++) {
      events.add(Event(name, currentTime, duration));
      currentTime += interarrivalTime; 
    }

    return events; 
  }
}


class StochasticProcess extends Process {
  final ExpDistribution durationDistribution; 
  final ExpDistribution
      interarrivalDistribution; 
  final int firstArrival;
  final int end; 

  StochasticProcess(String name, YamlMap config)
      : firstArrival = config['first-arrival'] as int,
        end = config['end'] as int,
        durationDistribution = ExpDistribution(
            mean: (config['mean-duration'] as num)
                .toDouble()), 
        interarrivalDistribution = ExpDistribution(
            mean: (config['mean-interarrival-time'] as num).toDouble()),
  // calls super class to initialize process.      
        super(name, config);
//overrides generate events for process class.
  @override
  List<Event> generateEvents() {
    final events = <Event>[]; 
    int currentTime =
        firstArrival; 

    
    do {
      final duration =
          durationDistribution.next().ceil(); //'.ceil()' rounds number to nearest integer.
      events.add(Event(name, currentTime, duration)); 

      currentTime += interarrivalDistribution.next().ceil(); 
    } while (currentTime < end);

    return events; 
  }
}

/// An event that occurs once at a fixed time.
class Event {
  final String processName; 
  final int arrivalTime; 
  final int duration; 
  int start = 0; 
  int waitTime = 0; 

  Event(this.processName, this.arrivalTime, this.duration);
}
